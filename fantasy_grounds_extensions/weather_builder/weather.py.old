# -*- coding: utf-8 -*-
"""
Created on Sat Oct 27 09:09:45 2018

@author: Chris
"""

import random

A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V, W, X, Y, Z = 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26


DESERT, FOREST, HILLS, MOUNTAINS, PLAINS, SEACOAST, SWAMP = 1, 2, 3, 4, 5, 6, 7
YES,NO,SAME = 1,2,3
NONE, LGTSNOW, SNOW, HVYSNOW, LTSLEET, SLEET, HVYSLEET, DRIZZLE, RAIN, HVYRAIN, TROPSTORM, MONSOON = 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11
SHORT, MEDIUM, LONG = 1,2,3
LIGHT, HEAVY, PROLONGED, STORM = 1, 2, 3, 4

Temps = {}
Temps[A] = (-20, -40)
Temps[B] = (-15, -30)
Temps[C] = (-5, -20)
Temps[D] = (0, -10)
Temps[E] = (10, 0)
Temps[F] = (18, 10)
Temps[G] = (25, 10)
Temps[H] = (30, 15)
Temps[I] = (35, 15)
Temps[J] = (40, 20)
Temps[K] = (50, 30)
Temps[L] = (60, 40)
Temps[M] = (65, 45)
Temps[N] = (70, 50)
Temps[O] = (70, 55)
Temps[P] = (75, 55)
Temps[Q] = (80, 60)
Temps[R] = (80, 65)
Temps[S] = (85, 65)
Temps[T] = (85, 70)
Temps[U] = (90, 70)
Temps[V] = (90, 75)
Temps[W] = (95, 75)
Temps[X] = (100, 80)
Temps[Y] = (105, 80)
Temps[Z] = (115, 85)

Climate = {}
Climate[ARCTIC] = {}
Climate[SUBARCTIC] = {}
Climate[TEMPERATE] = {}
Climate[SUBTROPICAL] = {}
Climate[TROPICAL] = {}
Climate[ARCTIC][DESERT]=[(A,B,G),(A,B,H),(A,C,H),(A,E,H),(C,G,K),(F,J,L),(J,K,N),(J,K,M),(F,H,K),(D,G,J),(A,D,H),(A,B,H)]
Climate[ARCTIC][HILLS]=[(A,B,E),(A,B,D),(A,C,F),(A,D,G),(B,E,I),(C,F,I),(D,G,L),(D,G,K),(C,F,J),(C,E,H),(B,E,H),(A,C,E)]
Climate[ARCTIC][MOUNTAINS]=[(A,B,E),(A,B,D),(A,C,F),(A,D,G),(B,E,I),(C,F,I),(D,G,L),(D,G,K),(C,F,J),(C,E,H),(B,E,H),(A,C,E)]
Climate[ARCTIC][PLAINS]=[(A,B,G),(A,B,H),(A,C,H),(A,E,H),(C,G,K),(F,J,L),(J,K,N),(J,K,M),(F,H,K),(D,G,J),(A,D,H),(A,B,H)]
Climate[ARCTIC][SEACOAST]=[(A,C,H),(A,B,H),(A,C,H),(A,E,J),(C,G,K),(F,J,N),(J,K,P),(J,K,N),(E,I,L),(C,G,J),(A,E,I),(A,C,I)]
Climate[SUBARCTIC][DESERT]=[(A,D,I),(A,D,J),(B,E,J),(C,G,J),(F,K,M),(J,L,N),(K,M,Q),(J,M,Q),(G,K,Q),(F,H,M),(C,E,L),(A,C,I)]
Climate[SUBARCTIC][FOREST]=[(A,E,J),(A,E,I),(B,G,K),(D,J,L),(H,K,N),(J,L,P),(K,M,R),(J,M,R),(I,K,P),(E,J,K),(B,H,K),(A,F,J)]
Climate[SUBARCTIC][HILLS]=[(A,D,I),(A,D,I),(B,F,J),(C,G,J),(F,K,N),(J,L,N),(J,M,P),(I,M,P),(G,K,M),(D,J,L),(B,G,K),(A,D,J)]
Climate[SUBARCTIC][MOUNTAINS]=[(A,C,I),(A,D,I),(A,F,J),(B,H,L),(E,J,M),(I,K,M),(J,L,N),(I,M,O),(G,K,M),(D,J,L),(B,F,K),(A,D,J)]
Climate[SUBARCTIC][PLAINS]=[(A,D,I),(A,D,J),(B,E,J),(C,G,J),(F,K,M),(J,L,N),(K,M,Q),(J,M,Q),(G,K,Q),(F,H,M),(C,E,L),(A,C,I)]
Climate[SUBARCTIC][SEACOAST]=[(B,F,K),(B,G,K),(C,H,K),(D,J,M),(H,K,N),(J,L,R),(K,M,R),(K,M,R),(J,L,P),(E,K,M),(C,H,L),(A,F,K)]
Climate[SUBARCTIC][SWAMP] = Climate[SUBARCTIC][PLAINS]
Climate[TEMPERATE][DESERT]=[(K,M,S),(K,M,T),(L,M,T),(M,N,W),(M,P,X),(P,P,Z),(U,Y,Z),(U,Y,Z),(Q,W,Y),(N,S,X),(L,R,X),(K,M,R)]
Climate[TEMPERATE][FOREST]=[(C,F,L),(B,F,K),(E,K,P),(H,L,P),(K,N,U),(M,P,V),(M,S,X),(M,S,X),(L,P,V),(J,N,R),(F,J,L),(D,J,L)]
Climate[TEMPERATE][HILLS]=[(B,I,L),(C,J,M),(E,K,P),(I,L,R),(J,O,T),(J,Q,X),(L,T,Y),(L,T,Y),(K,Q,W),(J,N,T),(F,K,P),(C,J,M)]
Climate[TEMPERATE][MOUNTAINS]=[(A,I,L),(B,I,M),(C,J,M),(E,K,P),(F,L,S),(K,O,V),(L,Q,X),(K,Q,W),(I,N,U),(E,L,S),(C,K,R),(B,J,L)]
Climate[TEMPERATE][PLAINS]=[(B,H,M),(C,H,N),(D,K,Q),(G,L,S),(K,N,U),(L,P,X),(M,S,Y),(M,S,Y),(K,P,W),(G,L,S),(E,K,Q),(C,J,M)]
Climate[TEMPERATE][SEACOAST]=[(E,J,M),(F,K,N),(I,K,Q),(K,L,S),(K,M,T),(L,O,W),(M,P,X),(M,P,W),(L,O,W),(K,L,T),(G,K,P),(E,K,M)]
Climate[TEMPERATE][SWAMP] = Climate[TEMPERATE][PLAINS]
Climate[SUBTROPICAL][DESERT]=[(L,P,T),(L,P,U),(M,S,W),(N,T,X),(O,T,X),(R,V,Y),(T,X,Z),(T,X,Z),(R,U,Y),(P,U,Y),(N,S,X),(M,P,W)]
Climate[SUBTROPICAL][FOREST]=[(L,T,U),(L,T,V),(M,T,V),(N,T,W),(N,T,X),(P,U,X),(P,U,X),(P,U,X),(O,U,W),(N,U,W),(M,S,V),(L,S,V)]
Climate[SUBTROPICAL][HILLS]=[(K,N,Q),(K,O,R),(L,Q,U),(M,S,V),(N,T,W),(O,U,X),(P,U,X),(P,U,Y),(N,S,X),(M,Q,V),(L,P,S),(K,N,R)]
Climate[SUBTROPICAL][MOUNTAINS]=[(K,M,P),(K,M,Q),(L,P,S),(L,P,T),(M,Q,U),(N,Q,U),(N,P,T),(N,O,R),(L,O,R),(L,N,Q),(L,N,Q),(K,M,P)]
Climate[SUBTROPICAL][PLAINS]=[(L,N,R),(K,O,S),(M,R,U),(N,S,X),(R,V,X),(S,W,Y),(T,W,Z),(T,W,Z),(S,V,Y),(Q,V,Y),(M,R,U),(L,P,S)]
Climate[SUBTROPICAL][SEACOAST]=[(L,M,U),(K,M,V),(K,O,W),(L,P,X),(M,Q,X),(M,S,Y),(N,S,Y),(N,S,Y),(M,R,X),(L,Q,W),(K,O,U),(K,M,U)]
Climate[SUBTROPICAL][SWAMP] = Climate[SUBTROPICAL][PLAINS]
Climate[TROPICAL][DESERT]=[(P,R,U),(P,S,T),(P,T,W),(P,U,X),(Q,V,X),(T,W,Z),(V,Y,Z),(V,Y,Z),(U,X,Y),(U,V,X),(R,U,W),(Q,S,V)]
Climate[TROPICAL][FOREST]=[(M,U,W),(L,U,W),(M,U,W),(O,U,X),(O,U,X),(Q,U,X),(Q,U,X),(Q,U,X),(Q,U,X),(P,U,X),(O,U,W),(M,U,W)]
Climate[TROPICAL][HILLS]=[(M,P,R),(N,P,T),(N,R,T),(P,R,U),(P,T,X),(Q,U,Y),(S,W,Z),(S,W,Z),(S,V,Y),(Q,T,W),(O,R,U),(N,Q,T)]
Climate[TROPICAL][MOUNTAINS]=[(M,P,R),(N,P,S),(N,Q,T),(O,Q,T),(O,Q,U),(O,Q,U),(N,P,T),(N,P,T),(N,P,T),(N,P,S),(M,P,S),(M,P,S)]
Climate[TROPICAL][PLAINS]=[(M,P,R),(N,Q,T),(N,R,U),(P,R,U),(R,W,T),(T,W,Y),(T,W,Z),(T,W,Z),(T,W,Y),(R,V,Y),(P,S,W),(N,R,U)]
Climate[TROPICAL][SEACOAST]=[(P,S,U),(P,S,V),(O,T,W),(Q,T,X),(Q,T,X),(R,T,Y),(R,T,X),(R,T,X),(R,T,W),(Q,S,V),(Q,S,V),(P,R,V)]
Climate[TROPICAL][SWAMP] = Climate[TROPICAL][PLAINS]

Precipitation = {}
Precipitation[ARCTIC] = {}
Precipitation[SUBARCTIC] = {}
Precipitation[TEMPERATE] = {}
Precipitation[SUBTROPICAL] = {}
Precipitation[TROPICAL] = {}
Precipitation[ARCTIC][DESERT]=[(0,T,0),(0,T,0),(0,T,0),(0,T,0)]
Precipitation[ARCTIC][HILLS]=[(0,0,T),(0,0,T),(0,0,T),(0,0,T)]
Precipitation[ARCTIC][MOUNTAINS]=[(0,0,T),(0,0,T),(0,0,T),(0,0,T)]
Precipitation[ARCTIC][PLAINS]=[(0,T,T),(0,L,T),(0,M,L),(0,T,T)]
Precipitation[ARCTIC][SEACOAST]=[(0,T,0),(0,L,T),(0,L,T),(0,L,T)]
Precipitation[SUBARCTIC][DESERT]=[(0,T,0),(0,0,T),(0,0,T),(0,T,0)]
Precipitation[SUBARCTIC][FOREST]=[(0,L,T),(T,M,L),(T,M,L),(T,L,T)]
Precipitation[SUBARCTIC][HILLS]=[(0,T,T),(0,L,T),(T,L,L),(0,L,T)]
Precipitation[SUBARCTIC][MOUNTAINS]=[(0,T,T),(T,M,L),(T,L,T),(0,L,T)]
Precipitation[SUBARCTIC][PLAINS]=[(0,L,T),(T,M,L),(T,M,L),(T,L,T)]
Precipitation[SUBARCTIC][SEACOAST]=[(0,T,T),(0,L,T),(T,M,L),(0,L,T)]
Precipitation[SUBARCTIC][SWAMP]=[(0,L,T),(T,M,L),(T,L,L),(T,L,L)]
Precipitation[TEMPERATE][DESERT]=[(0,T,0),(0,T,0),(0,T,0),(0,0,0)]
Precipitation[TEMPERATE][FOREST]=[(T,M,L),(L,H,M),(L,M,M),(L,M,M)]
Precipitation[TEMPERATE][HILLS]=[(T,M,L),(L,H,M),(L,H,M),(T,M,L)]
Precipitation[TEMPERATE][MOUNTAINS]=[(0,M,L),(0,M,L),(0,L,T),(0,M,L)]
Precipitation[TEMPERATE][PLAINS]=[(0,L,T),(L,H,M),(L,H,M),(T,M,L)]
Precipitation[TEMPERATE][SEACOAST]=[(L,H,M),(T,M,L),(0,L,T),(L,H,M)]
Precipitation[TEMPERATE][SWAMP]=[(T,M,L),(L,H,L),(L,H,M),(0,M,L)]
Precipitation[SUBTROPICAL][DESERT]=[(0,T,0),(0,T,0),(0,0,0),(0,T,0)]
Precipitation[SUBTROPICAL][FOREST]=[(M,H,H),(M,D,H),(M,D,H),(M,H,H)]
Precipitation[SUBTROPICAL][HILLS]=[(T,L,L),(L,H,M),(L,H,M),(T,M,L)]
Precipitation[SUBTROPICAL][MOUNTAINS]=[(T,M,L),(L,H,M),(L,M,M),(T,M,L)]
Precipitation[SUBTROPICAL][PLAINS]=[(0,L,T),(T,H,L),(T,M,L),(0,L,T)]
Precipitation[SUBTROPICAL][SEACOAST]=[(T,M,L),(L,H,M),(L,D,M),(0,L,T)]
Precipitation[SUBTROPICAL][SWAMP]=[(T,L,L),(T,M,L),(T,H,L),(T,L,L)]
Precipitation[TROPICAL][DESERT]=[(0,T,0),(0,L,T),(0,T,0),(0,T,0)]
Precipitation[TROPICAL][FOREST]=[(M,D,H),(M,D,H),(M,D,H),(M,D,H)]
Precipitation[TROPICAL][HILLS]=[(0,T,0),(0,L,T),(T,M,L),(0,T,0)]
Precipitation[TROPICAL][MOUNTAINS]=[(T,M,L),(M,H,H),(T,M,L),(M,H,H)]
Precipitation[TROPICAL][PLAINS]=[(0,T,0),(L,H,M),(M,H,M),(L,H,M)]
Precipitation[TROPICAL][SEACOAST]=[(0,T,0),(L,D,M),(H,D,D),(0,L,T)]
Precipitation[TROPICAL][SWAMP]=[(0,L,T),(M,H,H),(M,H,M),(L,M,M)]

Special = {}
Special[ARCTIC] = {}
Special[SUBARCTIC] = {}
Special[TEMPERATE] = {}
Special[SUBTROPICAL] = {}
Special[TROPICAL] = {}
Special[ARCTIC][DESERT]=[(G,A,D,D),(G,A,D,D),(G,A,D,D),(G,A,D,D)]
Special[ARCTIC][HILLS]=[(G,A,D,D),(G,A,D,M),(G,A,D,Z),(G,A,D,D)]
Special[ARCTIC][MOUNTAINS]=[(G,A,D,D),(G,A,D,M),(G,A,M,Z),(G,A,D,M)]
Special[ARCTIC][PLAINS]=[(G,A,D,D),(A,G,D,M),(X,A,D,Z),(G,A,D,Z)]
Special[ARCTIC][SEACOAST]=[(G,A,D,D),(A,G,M,Z),(G,A,M,Z),(G,A,M,Z)]
Special[SUBARCTIC][DESERT]=[(G,A,D,D),(G,A,D,D),(A,S,D,D),(G,A,D,D)]
Special[SUBARCTIC][FOREST]=[(G,A,D,Z),(A,X,D,Z),(X,A,Z,D),(A,X,M,D)]
Special[SUBARCTIC][HILLS]=[(G,A,M,D),(A,G,D,Z),(A,X,Z,D),(G,A,M,D)]
Special[SUBARCTIC][MOUNTAINS]=[(G,A,D,M),(A,X,M,Z),(A,X,Z,D),(G,A,M,D)]
Special[SUBARCTIC][PLAINS]=[(G,A,M,D),(A,X,D,Z),(Z,A,Z,D),(G,A,D,Z)]
Special[SUBARCTIC][SEACOAST]=[(G,A,M,Z),(G,A,M,Z),(X,A,Z,M),(A,G,M,Z)]
Special[SUBARCTIC][SWAMP]=[(A,X,M,Z),(A,X,M,Z),(X,A,Z,M),(A,X,M,Z)]
Special[TEMPERATE][DESERT]=[(A,S,D,Z),(G,S,D,Z),(G,S,D,Z),(S,G,D,Z)]
Special[TEMPERATE][FOREST]=[(A,X,M,Z),(G,X,M,Z),(G,X,M,Z),(A,X,M,Z)]
Special[TEMPERATE][HILLS]=[(A,X,M,Z),(A,X,Z,T),(A,X,D,Z),(A,X,D,Z)]
Special[TEMPERATE][MOUNTAINS]=[(A,X,M,D),(A,X,M,Z),(A,X,D,Z),(X,A,D,Z)]
Special[TEMPERATE][PLAINS]=[(A,G,D,Z),(A,X,T,Z),(X,G,D,Z),(X,A,D,Z)]
Special[TEMPERATE][SEACOAST]=[(A,X,M,Z),(C,X,M,Z),(C,X,M,Z),(A,X,M,Z)]
Special[TEMPERATE][SWAMP]=[(A,X,M,Z),(G,X,M,Z),(G,X,M,Z),(A,X,M,Z)]
Special[SUBTROPICAL][DESERT]=[(A,S,D,Z),(G,S,D,Z),(G,S,D,Z),(G,S,D,Z)]
Special[SUBTROPICAL][FOREST]=[(X,A,M,Z),(X,G,Z,M),(X,X,Z,M),(A,X,M,Z)]
Special[SUBTROPICAL][HILLS]=[(A,X,D,Z),(A,X,D,T),(X,G,D,Z),(A,X,Z,M)]
Special[SUBTROPICAL][MOUNTAINS]=[(A,X,D,Z),(A,X,Z,M),(X,G,Z,D),(X,A,Z,M)]
Special[SUBTROPICAL][PLAINS]=[(A,X,D,Z),(X,G,Z,T),(X,G,D,Z),(G,A,D,Z)]
Special[SUBTROPICAL][SEACOAST]=[(A,X,D,Z),(C,X,M,Z),(C,X,M,Z),(C,X,D,Z)]
Special[SUBTROPICAL][SWAMP]=[(A,X,D,Z),(C,X,M,Z),(C,X,M,Z),(C,X,D,Z)]
Special[TROPICAL][DESERT]=[(A,S,D,Z),(G,S,D,Z),(G,S,D,Z),(G,S,D,Z)]
Special[TROPICAL][FOREST]=[(X,X,M,Z),(X,X,Z,M),(X,X,Z,M),(X,X,M,Z)]
Special[TROPICAL][HILLS]=[(A,G,D,Z),(G,X,D,Z),(G,X,D,Z),(G,G,Z,D)]
Special[TROPICAL][MOUNTAINS]=[(A,X,M,Z),(A,X,M,Z),(X,G,Z,M),(A,G,M,Z)]
Special[TROPICAL][PLAINS]=[(G,X,D,Z),(G,X,D,Z),(S,X,Z,D),(G,X,Z,D)]
Special[TROPICAL][SEACOAST]=[(X,A,D,Z),(A,X,M,Z),(C,X,M,Z),(X,A,Z,M)]
Special[TROPICAL][SWAMP]=[(A,X,Z,D),(G,X,Z,M),(X,G,M,Z),(X,A,M,Z)]

Humidity = {}
Humidity[ARCTIC] = {}
Humidity[SUBARCTIC] = {}
Humidity[TEMPERATE] = {}
Humidity[SUBTROPICAL] = {}
Humidity[TROPICAL] = {}
Humidity[ARCTIC][DESERT]=[L,L,L,L]
Humidity[ARCTIC][HILLS]=[L,L,L,L]
Humidity[ARCTIC][MOUNTAINS]=[L,L,L,L]
Humidity[ARCTIC][PLAINS]=[L,L,L,L]
Humidity[ARCTIC][SEACOAST]=[L,L,L,L]
Humidity[SUBARCTIC][DESERT]=[L,L,L,L]
Humidity[SUBARCTIC][FOREST]=[L,M,M,L]
Humidity[SUBARCTIC][HILLS]=[L,L,L,L]
Humidity[SUBARCTIC][MOUNTAINS]=[L,M,L,L]
Humidity[SUBARCTIC][PLAINS]=[L,M,M,L]
Humidity[SUBARCTIC][SEACOAST]=[L,M,M,L]
Humidity[SUBARCTIC][SWAMP]=[L,M,M,L]
Humidity[TEMPERATE][DESERT]=[L,L,L,L]
Humidity[TEMPERATE][FOREST]=[M,H,M,M]
Humidity[TEMPERATE][HILLS]=[M,H,H,M]
Humidity[TEMPERATE][MOUNTAINS]=[L,M,L,M]
Humidity[TEMPERATE][PLAINS]=[M,H,H,M]
Humidity[TEMPERATE][SEACOAST]=[H,M,M,H]
Humidity[TEMPERATE][SWAMP]=[M,H,H,M]
Humidity[SUBTROPICAL][DESERT]=[L,L,L,L]
Humidity[SUBTROPICAL][FOREST]=[H,H,H,H]
Humidity[SUBTROPICAL][HILLS]=[M,H,H,H]
Humidity[SUBTROPICAL][MOUNTAINS]=[M,H,H,H]
Humidity[SUBTROPICAL][PLAINS]=[M,H,M,L]
Humidity[SUBTROPICAL][SEACOAST]=[M,H,H,M]
Humidity[SUBTROPICAL][SWAMP]=[M,H,H,M]
Humidity[TROPICAL][DESERT]=[L,L,L,L]
Humidity[TROPICAL][FOREST]=[H,H,H,H]
Humidity[TROPICAL][HILLS]=[M,M,H,M]
Humidity[TROPICAL][MOUNTAINS]=[M,H,H,H]
Humidity[TROPICAL][PLAINS]=[M,H,H,H]
Humidity[TROPICAL][SEACOAST]=[M,H,H,M]
Humidity[TROPICAL][SWAMP]=[M,H,H,H]

def d6():
	roll = random.randint(1,6)
	return roll

def rollOE():
    roll = random.randint(1,100)
    retval = roll
    while roll > 95:
        roll = random.randint(1,100)
        retval += roll
    return retval

def convertFtoC(F):
    return (F-32)*(5/9)

class Day:
    
    def __init__(self):
        self.highTemp = 0
        self.lowTemp = 0
        self.windSpeed = 0
        self.windDirection = 'Prevailing'
        self.rain = 'None'
        self.code = 0

class Weather:
    
    def __init__(self, latitude, longitude):
        self.year = 360 # days in year
        self.latitude = latitude
        self.longitude = longitude
        self.seed = self.setSeed() # holder for random seed, which will be the concatination of longitude and latitude
        self.cycle = 50 # years before weather resets
        self.days = []
        self.terrain = 0
        self.maxwarm = 0
        self.maxcold = 0
        self.doubledays = 0
        self.ExPrecFlg = False
        self.coldwave = 0
        self.heatwave = 0
        self.hurricane = 0
        self.drought = 0
        self.rain = random.randint(1,2)
        self.rainremaining = 0
        
    def setSeed(self):
        flg = True
        if self.latitude < 0:
            flg = not flg
        if self.longitude < 0:
            flg = not flg
        latstr = str(abs(int(round(self.latitude,0))))
        longstr = str(abs(int(round(self.longitude,0))))
        seedstr = longstr + latstr
        if flg:
            seed = int(seedstr)
        else:
            seed = -1*(int(seedstr))
        random.seed(seed)
        return seed
        
    def setLatitude(self, latitude):
        self.latitude = latitude
        
    def setLongitude(self, longitude):
        self.longitude = longitude
        
    def getSeason(self, daynum): # assumes mid-summer is the start of the year
        theday = daynum % self.year
        daysInSeason = self.year/12
        if theday < daysInSeason/2:
            season = 7 # summer2
            shortseason = 2
        elif theday < (daysInSeason/2) + daysInSeason:
            season = 8 # summer3
            shortseason = 2
        elif theday < (daysInSeason/2) + (2*daysInSeason):
            season = 9 # autumn1
            shortseason = 3
        elif theday < (daysInSeason/2) + (3*daysInSeason):
            season = 10 # autumn2
            shortseason = 3
        elif theday < (daysInSeason/2) + (4*daysInSeason):
            season = 11 # autumn3
            shortseason = 3
        elif theday < (daysInSeason/2) + (5*daysInSeason):
            season = 0 # winter1
            shortseason = 0
        elif theday < (daysInSeason/2) + (6*daysInSeason):
            season = 1 # winter2
            shortseason = 0
        elif theday < (daysInSeason/2) + (7*daysInSeason):
            season = 2 # winter3
            shortseason = 0
        elif theday < (daysInSeason/2) + (8*daysInSeason):
            season = 3 # spring1
            shortseason = 1
        elif theday < (daysInSeason/2) + (9*daysInSeason):
            season = 4 # spring2
            shortseason = 1
        elif theday < (daysInSeason/2) + (10*daysInSeason):
            season = 5 # spring3
            shortseason = 1
        elif theday < (daysInSeason/2) + (11*daysInSeason):
            season = 6 # summer1
            shortseason = 2
        else:
            season = 7 # summer2
            shortseason = 2
        return shortseason, season
    
    
    
    def getTemps(self, code):
        if code == A:
            jitterLow = random.randint(1,7) - 4
            jitterHigh = random.randint(1,3) - 2
        elif code == Z:
            jitterLow = random.randint(1,3) - 2
            jitterHigh = random.randint(1,7) - 4
        else:
            HighHighTemp = Temps[code+1][0]-Temps[code-1][0]
            LowLowTemp = Temps[code+1][1]-Temps[code-1][1]
            if HighHighTemp > 14:
                jitterHigh = random.randint(1,11) - 6
            elif HighHighTemp > 9:
                jitterHigh = random.randint(1,7) - 4
            else:
                jitterHigh = random.randint(1,3) - 1
            if LowLowTemp > 14:
                jitterLow = random.randint(1,11) - 6
            elif LowLowTemp > 9:
                jitterLow = random.randint(1,7) - 4
            else:
                jitterLow = random.randint(1,3) - 1
        HighTemp = Temps[code][0]
        LowTemp = Temps[code][1]
        HighTemp += jitterHigh
        LowTemp += jitterLow
        return HighTemp, LowTemp
    
    def rollTemp(self, total):
        if total==2:
            change = -3
        elif total==3:
            change = -2
        elif total==4:
            change = -2
        elif total==5:
            change = -1
        elif total==6:
            change = -1
        elif total==7:
            change = 0
        elif total==8:
            change = 1
        elif total==9:
            change = 1
        elif total==10:
            change = 2
        elif total==11:
            change = 2
        else:
            change = 3
        return change
    
    def getWind(self, wind, windmod):
        if wind == LIGHT:
            windex = 0
        elif wind == HEAVY:
            windex = 1
        else:
            windex = 2
        roll = self.rollOE() + windmod
        if roll < 1:
            retval = (0,1,1)
        elif roll < 6:
            retval = (1,2,2)
        elif roll < 11:
            retval = (2,5,4)
        elif roll < 16:
            retval = (3,8,6)
        elif roll < 21:
            retval = (4,11,8)
        elif roll < 26:
            retval = (5,14,11)
        elif roll < 31:
            retval = (6,17,14)
        elif roll < 36:
            retval = (7,20,17)
        elif roll < 41:
            retval = (8,23,20)
        elif roll < 46:
            retval = (9,26,24)
        elif roll < 51:
            retval = (10,29,28)
        elif roll < 56:
            retval = (11,32,32)
        elif roll < 61:
            retval = (12,35,36)
        elif roll < 66:
            retval = (13,38,39)
        elif roll < 71:
            retval = (14,41,42)
        elif roll < 76:
            retval = (15,44,45)
        elif roll < 81:
            retval = (16,47,48)
        elif roll < 86:
            retval = (17,50,50)
        elif roll < 91:
            retval = (18,53,52)
        elif roll < 96:
            retval = (19,56,54)
        elif roll < 101:
            retval = (20,59,56)
        elif roll < 111:
            retval = (21,63,60)
        elif roll < 121:
            retval = (22,67,65)
        elif roll < 131:
            retval = (23,71,70)
        elif roll < 141:
            retval = (24,75,80)
        elif roll < 151:
            retval = (25,79,90)
        elif roll < 161:
            retval = (26,83,100)
        elif roll < 171:
            retval = (27,87,115)
        elif roll < 181:
            retval = (28,91,130)
        elif roll < 191:
            retval = (29,95,145)
        elif roll < 201:
            retval = (30,100,165)
        elif roll < 221:
            retval = (31,105,185)
        elif roll < 241:
            retval = (32,110,205)
        elif roll < 261:
            retval = (33,115,230)
        elif roll < 281:
            retval = (34,120,255)
        else:
            retval = (35,125,300)
        return retval[windex]
    
    def getDuration(self, duration, durmod):
        if duration == SHORT:
            dindex = 0
        elif duration == MEDIUM:
            dindex = 1
        else:
            dindex = 2
        roll = self.rollOE() + durmod
        if roll < 1:
            retval = (0.5,1,12)
        elif roll < 9:
            retval = (1,2,24)
        elif roll < 17:
            retval = (2,5,30)
        elif roll < 25:
            retval = (3,8,36)
        elif roll < 33:
            retval = (4,10,48)
        elif roll < 41:
            retval = (5,13,60)
        elif roll < 49:
            retval = (6,16,72)
        elif roll < 57:
            retval = (7,18,84)
        elif roll < 65:
            retval = (8,21,96)
        elif roll < 73:
            retval = (9,24,108)
        elif roll < 81:
            retval = (10,26,120)
        elif roll < 89:
            retval = (11,29,132)
        elif roll < 97:
            retval = (12,32,144)
        elif roll < 113:
            retval = (14,37,192)
        elif roll < 129:
            retval = (16,42,216)
        elif roll < 145:
            retval = (18,48,240)
        elif roll < 161:
            retval = (20,53,264)
        elif roll < 177:
            retval = (22,58,288)
        elif roll < 193:
            retval = (24,64,336)
        elif roll < 217:
            retval = (27,72,384)
        elif roll < 241:
            retval = (30,80,432)
        elif roll < 265:
            retval = (33,88,480)
        else:
            retval = (36,96,600)
        return retval[dindex]
    
    def getRainInches(self, inch, inchmod):
        if inch == LIGHT:
            index = 0
        elif inch == HEAVY:
            index = 1
        else:
            index = 2
        roll = self.rollOE() + inchmod
        if roll < 1:
            retval = (0.25,1,1/24)
        elif roll < 6:
            retval = (0.5,1,1/20)
        elif roll < 11:
            retval = (1,3,1/16)
        elif roll < 16:
            retval = (1.5,5,1/12)
        elif roll < 21:
            retval = (2,6,2.5/24)
        elif roll < 26:
            retval = (2.5,8,3/24)
        elif roll < 31:
            retval = (3,10,3.5/24)
        elif roll < 41:
            retval = (4,13,1/6)
        elif roll < 51:
            retval = (5,16,5/24)
        elif roll < 61:
            retval = (6,20,1/4)
        elif roll < 71:
            retval = (7,23,7/24)
        elif roll < 81:
            retval = (8,26,1/3)
        elif roll < 91:
            retval = (9,30,9/24)
        elif roll < 101:
            retval = (10,33,10/24)
        elif roll < 121:
            retval = (12,40,1/2)
        elif roll < 141:
            retval = (14,46,14/24)
        elif roll < 161:
            retval = (16,53,16/24)
        elif roll < 181:
            retval = (18,60,18/24)
        elif roll < 201:
            retval = (20,66,20/24)
        elif roll < 231:
            retval = (23,76,23/24)
        elif roll < 261:
            retval = (26,86,26/24)
        else:
            retval = (29,96,29/24)
        return retval[index]
    
    def getWindRain(self, die1, die2, climate, terrain, shortseason, LowTemp, HighTemp):
        rainidx = 0
        if die1 > die2:
            rainidx = 0
            self.ExPrecFlg = False
        elif die1 == die2:
            rainidx = 1
            if self.doubledays > 0:
                if self.ExPrecFlg == False:
                    chance = random.randint(1,100)
                    if chance > 50:
                        self.ExPrecFlg = True
                    else:
                        self.ExPrecFlg = False
        else:
            rainidx = 2
            self.ExPrecFlg = False
        Prec = Precipitation[climate][terrain][shortseason][rainidx]
        if Prec == 0:
            if self.ExPrecFlg:
                Prec = T
        elif Prec == T:
            if self.ExPrecFlg:
                Prec = L
        elif Prec == L:
            if self.ExPrecFlg:
                Prec = M
        elif Prec == M:
            if self.ExPrecFlg:
                Prec = H
        elif Prec == H:
            if self.ExPrecFlg:
                Prec = D
        rain = NONE
        durmod = 0
        inchmod = 0
        wind = LIGHT
        windmod = -10
        if Prec == T:
            durmod = -30
            inchmod = -75
            if LowTemp < 32:
                if HighTemp < 32:
                    rain = LGTSNOW
                    durmod += -15
                    inchmod += 10
                    duration = MEDIUM
                    inch = HEAVY
                    wind = HEAVY
                    windmod = -25
                else:
                    rain = LTSLEET
                    durmod += -25
                    inchmod += -40
                    duration = SHORT
                    inch = LIGHT
                    wind = HEAVY
                    windmod = -30
            else:
                rain = DRIZZLE
                durmod += 10
                inchmod += -45
                duration = SHORT
                inch = LIGHT
                wind = LIGHT
                windmod = 0
        elif Prec == L:
            if LowTemp < 32:
                if HighTemp < 32:
                    rain = LGTSNOW
                    durmod += -15
                    inchmod += 10
                    duration = MEDIUM
                    inch = LIGHT
                    wind = HEAVY
                    windmod = -25
                else:
                    rain = LTSLEET
                    durmod += -25
                    inchmod += -40
                    duration = SHORT
                    inch = LIGHT
                    wind = HEAVY
                    windmod = -30
            else:
                rain = DRIZZLE
                durmod += 10
                inchmod += -45
                duration = SHORT
                inch = LIGHT
                wind = LIGHT
                windmod = 0
        elif Prec == M:
            if LowTemp < 32:
                if HighTemp < 40:
                    rain = SNOW
                    durmod += -10
                    inchmod += 25
                    duration = MEDIUM
                    inch = LIGHT
                    wind = HEAVY
                    windmod = -20
                else:
                    rain = SLEET
                    durmod += -15
                    inchmod += -35
                    duration = SHORT
                    inch = LIGHT
                    wind = HEAVY
                    windmod = -20
            else:
                rain = RAIN
                durmod += +45
                inchmod += -20
                duration = SHORT
                inch = LIGHT
                wind = LIGHT
                windmod = 0
        elif Prec == H:
            if LowTemp < 32:
                if HighTemp < 40:
                    rain = HVYSNOW
                    durmod += 5
                    inchmod += -5
                    duration = MEDIUM
                    inch = HEAVY
                    wind = HEAVY
                    windmod = -15
                else:
                    rain = HVYSLEET
                    durmod += 0
                    inchmod += -15
                    duration = SHORT
                    inch = LIGHT
                    wind = LIGHT
                    windmod = -15
            elif LowTemp > 60:
                rain = TROPSTORM
                durmod += 0
                inchmod += -5
                duration = LONG
                inch = PROLONGED
                wind = HEAVY
                windmod = 30
            else:
                rain = HVYRAIN
                durmod += 30
                inchmod += 20
                duration = SHORT
                inch = LIGHT
                wind = HEAVY
                windmod = -10
        elif Prec == D:
            if LowTemp < 32:
                if HighTemp < 40:
                    rain = HVYSNOW
                    durmod = -10
                    inchmod = 30
                    durmod += 5
                    inchmod += -5
                    duration = MEDIUM
                    inch = HEAVY
                    wind = HEAVY
                    windmod = -15
                else:
                    rain = HVYSLEET
                    durmod = -10
                    inchmod = 30
                    durmod += 0
                    inchmod += -15
                    duration = SHORT
                    inch = LIGHT
                    wind = HEAVY
                    windmod = -15
            elif LowTemp > 75:
                rain = MONSOON
                durmod += 80
                inchmod += 25
                duration = LONG
                inch = PROLONGED
                wind = STORM
                windmod = 0
            elif LowTemp > 60:
                rain = TROPSTORM
                durmod += 0
                inchmod += -5
                duration = LONG
                inch = PROLONGED
                wind = HEAVY
                windmod = 30
            else:
                rain = HVYRAIN
                durmod = -10
                inchmod = 30
                durmod += 30
                inchmod += 20
                duration = SHORT
                inch = LIGHT
                wind = HEAVY
                windmod = -10
        windspd = self.getWind(wind,windmod)
        if rain == NONE:
            hours = 0
            rainamnt = 0
        else:
            hours = self.getDuration(duration, durmod)
            rainamnt = self.getRainInches(inch, inchmod)
        if inch == PROLONGED:
            rainamnt *= hours
        if rain == LGTSNOW:
            raintype = "Light Snow"
        elif rain == SNOW:
            raintype = "Snow"
        elif rain == HVYSNOW:
            raintype = "Snow Storm"
        elif rain == LTSLEET:
            raintype = "Light Sleet"
        elif rain == SLEET:
            raintype = "Sleet"
        elif rain == HVYSLEET:
            raintype = "Sleetstorm"
        elif rain == DRIZZLE:
            raintype = "Drizzle"
        elif rain == RAIN:
            raintype = "Light Rain"
        elif rain == HVYRAIN:
            raintype = "Heavy Rain"
        elif rain == TROPSTORM:
            raintype = "Tropical Storm"
        elif rain == MONSOON:
            raintype = "Monsoon"
        else:
            raintype = "None"
        return raintype, '{0} mph'.format(windspd), rainamnt, hours
        
    
    def rollRain(self, die1, die2, climate, terrain, shortseason):
        total = die1 + die2
        if total == 7:
            if self.rain == YES:
                rain = self.getRain(die1, die2, climate, terrain, shortseason)
        elif total % 2 == 0:
            rain = self.getRain(die1, die2, climate, terrain, shortseason)
            self.rain = YES
        else:
            rain = 'None'
            self.rain = NO
        return rain
    
    def getSpecialWeather(self, roll):
        die3 = random.randint(1,6)
        die4 = random.randint(1,6)
        total = die3 + die4
        
	
    def getWeather(self, day):
        curDay = Day()
        code = 0
        if len(self.days) > 0:
            prevDay = self.days[len(self.days)-1]
            code = prevDay.code
        else:
            prevDay = False
        shortseason,season = self.getSeason(day)
        climate = self.getClimateZone()
        terrain = self.terrain
        if terrain == 0:
            terrain = PLAINS
        if code == 0:
            code = Climate[climate][terrain][season][1]
        low = Climate[climate][terrain][season][0]
        high = Climate[climate][terrain][season][2]
        die1 = roll1d6()
        die2 = roll1d6()
        total = roll1+roll2
        if self.maxwarm > 0:
            if total > 6 and total <= self.maxwarm + 6:
                total = 6
                self.maxwarm = 0
        if self.maxcold > 0:
            if total < 8 and total >= 8-self.maxcold:
                total = 8
                self.maxcold = 0
        
            
            
